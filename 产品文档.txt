# Knowledge Companion 产品文档 v1.0

## 一、产品概述

### 1.1 产品定位
Knowledge Companion是一个AI驱动的个人知识管理工具，致力于通过AI辅助实现自然的知识输入和智能连接。产品愿景是"让学习像对话一样自然"。

### 1.2 核心价值
- 降低知识管理门槛
- 提供智能知识连接
- 创造"啊哈时刻"
- 促进知识内化

### 1.3 目标用户
- 个人知识管理者
- 终身学习者
- 内容创作者
- 研究工作者

## 二、核心功能

### 2.1 智能卡片创建
```
基础功能：
- 文本/语音输入
- AI自动提取关键信息生成卡片
- 智能分类与标签
- 自动生成知识连接建议

卡片结构：
1. id（唯一的id）
2. 单一且完整的想法（包含标题，内容，上下文/背景）
3. 数据源（用于记录时间，来源等额外信息）
4. 索引（多种索引方式，例如BM25，关键词索引，向量索引等）
5. 连接（记录与其他卡片的关联）
```


### 2.2 知识连接系统
```
连接机制：
- 实时关联推荐
- 一键确认连接

展示方式：
- 知识图谱可视化
- 关联卡片预览
- 连接强度指示
```


### 2.3 索引系统
```
索引类型：
- 关键词索引
- 向量索引（语义）
- BM25文本索引
- 时间索引

索引功能：
- 多维度检索
- 智能推荐
- 相似度匹配
```


## 三、技术方案

### 3.1 技术架构
```
系统架构：
Frontend:
- Streamlit (快速原型)
- 简单UI组件
- 实时预览

Backend:
- FastAPI
- SQLite
- FAISS/Chroma

AI Integration:
- OpenAI API
- 本地向量存储
```


### 3.2 数据模型
```python
Card:
{
    "id": str,          # 唯一标识
    "content": {
        "summary": str, # 核心内容
        "content": str     # 原始输入
    },
    "source": {
        "type": str,   # 来源类型
        "timestamp": datetime,
        "context": str
        ...
    },
    "index": {
        "keywords": List[str],
        "vector_embedding": Vector,
        "category": str
        ...
    },
    "connections": List[{
        "card_id": str,
        "strength": int
    }]
}
```


### 3.3 核心流程
```
1. 卡片创建流程：
输入 → AI处理 → 索引生成 → 存储 → 连接推荐

2. 检索流程：
查询 → 多维检索 → 结果融合 → 排序展示

3. 连接流程：
新卡片 → 相似度计算 → 连接推荐 → 用户确认
```


## 四、开发规划

### 4.1 开发阶段
```
Phase 1: 基础功能（1-2天）
- 卡片CRUD
- 基础UI
- 本地存储

Phase 2: AI集成（2-3天）
- OpenAI接入
- 信息提取
- 索引生成

Phase 3: 知识连接（2-3天）
- 向量索引
- 连接推荐
- 可视化

Phase 4: 优化改进（持续）
- 体验优化
- 性能提升
- 功能扩展
```


### 4.2 技术关键点
1. **性能优化**
   - 本地缓存
   - 异步处理
   - 延迟加载

2. **AI集成**
   - API封装
   - 错误处理
   - 结果缓存

3. **数据管理**
   - 定期备份
   - 版本控制
   - 数据迁移

### 4.3 成功指标
```
核心指标：
- 卡片创建完成率
- AI理解准确率
- 连接采纳率
- 用户回访率

体验指标：
- AI响应时间 < 1s
- 界面操作流畅度
- 功能发现度
```
